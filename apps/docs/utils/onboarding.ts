export interface PostmanCollection {
  info: {
    name: string;
    description: string;
    schema: string;
  };
  variable: Array<{
    key: string;
    value: string;
    type: string;
  }>;
  item: Array<{
    name: string;
    request: {
      method: string;
      header: Array<{
        key: string;
        value: string;
        type: string;
      }>;
      body: {
        mode: string;
        raw: string;
      };
      url: {
        raw: string;
        host: string[];
        path: string[];
      };
      description: string;
    };
  }>;
}

export const SUPPORTED_ONBOARDING_SERVICES = {
  '/docs/services/onboarding/evaluatePassiveLivenessToken': 'evaluatePassiveLivenessToken',
  '/docs/services/onboarding/authenticateFacial': 'authenticateFacial',
  '/docs/services/tracking/finishTracking': 'finishTracking',
  '/docs/services/onboarding/identityValidationV2': 'identityV2',
} as const;

export function isSupportedOnboardingService(pathname: string): boolean {
  return Object.keys(SUPPORTED_ONBOARDING_SERVICES).some(service =>
    pathname.includes(service)
  );
}

export function getCurrentOnboardingService(pathname: string): string | null {
  const service = Object.keys(SUPPORTED_ONBOARDING_SERVICES).find(service =>
    pathname.includes(service)
  );
  return service ? SUPPORTED_ONBOARDING_SERVICES[service as keyof typeof SUPPORTED_ONBOARDING_SERVICES] : null;
}

export function generateEvaluatePassiveLivenessTokenCollection(): PostmanCollection {
  return {
    info: {
      name: "IDAPI: Evaluate Passive Liveness Token",
      description: "This service performs a liveness check using the best tokenized image obtained during the user's selfie capture. To generate the tokenized image, the native function of the Selphi widget is used, with the bestImage parameter (open image) generated by the widget.",
      schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    variable: [
      {
        key: "baseUrl",
        value: "{{IDENTITY_API_BASE_URL}}",
        type: "string"
      },
      {
        key: "apiKey",
        value: "{{API_KEY}}",
        type: "string"
      },
      {
        key: "imageBuffer",
        value: "{{IMAGE_BUFFER_TOKEN}}",
        type: "string"
      },
      {
        key: "extraData",
        value: "{{EXTRA_DATA}}",
        type: "string"
      },
      {
        key: "operationId",
        value: "{{OPERATION_ID}}",
        type: "string"
      }
    ],
    item: [
      {
        name: "Evaluate Passive Liveness Token",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              imageBuffer: "{{imageBuffer}}",
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/evaluatePassiveLivenessToken",
            host: ["{{baseUrl}}"],
            path: ["services", "evaluatePassiveLivenessToken"]
          },
          description: "Performs liveness validation using tokenized image from Selphi widget. Requires Selphi Mobile widget or Selphi Web widget integration."
        }
      }
    ]
  };
}

export function generateAuthenticateFacialCollection(): PostmanCollection {
  return {
    info: {
      name: "IDAPI: Authenticate Facial",
      description: "Service that performs facial validation between two faces, including both open images and biometric templates. Supports 5 different validation methods depending on the integration type.",
      schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    variable: [
      {
        key: "baseUrl",
        value: "{{IDENTITY_API_BASE_URL}}",
        type: "string"
      },
      {
        key: "apiKey",
        value: "{{API_KEY}}",
        type: "string"
      },
      {
        key: "token1",
        value: "{{TOKEN_1}}",
        type: "string"
      },
      {
        key: "token2",
        value: "{{TOKEN_2}}",
        type: "string"
      },
      {
        key: "extraData",
        value: "{{EXTRA_DATA}}",
        type: "string"
      },
      {
        key: "operationId",
        value: "{{OPERATION_ID}}",
        type: "string"
      },
      {
        key: "openImage1",
        value: "{{OPEN_IMAGE_1_BASE64}}",
        type: "string"
      },
      {
        key: "openImage2",
        value: "{{OPEN_IMAGE_2_BASE64}}",
        type: "string"
      },
      {
        key: "templateRaw1",
        value: "{{TEMPLATE_RAW_1}}",
        type: "string"
      },
      {
        key: "templateRaw2",
        value: "{{TEMPLATE_RAW_2}}",
        type: "string"
      },
      {
        key: "tokenFaceImage",
        value: "{{TOKEN_FACE_IMAGE}}",
        type: "string"
      }
    ],
    item: [
      {
        name: "Method 1 - Open Images",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{openImage1}}",
              token2: "{{openImage2}}",
              method: 1,
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/authenticateFacial",
            host: ["{{baseUrl}}"],
            path: ["services", "authenticateFacial"]
          },
          description: "Facial authentication using two open images (Base64 format). No widget integration required."
        }
      },
      {
        name: "Method 2 - Biometric Templates",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{templateRaw1}}",
              token2: "{{templateRaw2}}",
              method: 2,
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/authenticateFacial",
            host: ["{{baseUrl}}"],
            path: ["services", "authenticateFacial"]
          },
          description: "Facial authentication using two biometric templates. Requires Selphi Mobile or Web widget integration."
        }
      },
      {
        name: "Method 3 - Open Image + Template",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{openImage1}}",
              token2: "{{templateRaw2}}",
              method: 3,
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/authenticateFacial",
            host: ["{{baseUrl}}"],
            path: ["services", "authenticateFacial"]
          },
          description: "Facial authentication using an open image and a biometric template. Requires Selphi Mobile or Web widget integration."
        }
      },
      {
        name: "Method 4 - Document Photo + Open Image",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{tokenFaceImage}}",
              token2: "{{openImage2}}",
              method: 4,
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/authenticateFacial",
            host: ["{{baseUrl}}"],
            path: ["services", "authenticateFacial"]
          },
          description: "Facial authentication using document photo token and an open image. Requires SelphID Mobile widget integration."
        }
      },
      {
        name: "Method 5 - Document Photo + Template",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{tokenFaceImage}}",
              token2: "{{templateRaw2}}",
              method: 5,
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/authenticateFacial",
            host: ["{{baseUrl}}"],
            path: ["services", "authenticateFacial"]
          },
          description: "Facial authentication using document photo token and a biometric template. Requires both Selphi Mobile/Web and SelphID Mobile widget integration."
        }
      }
    ]
  };
}

export function generateFinishTrackingCollection(): PostmanCollection {
  return {
    info: {
      name: "IDAPI: Finish Tracking",
      description: "This service completes the tracking process and should be invoked upon completing all validations in the Onboarding or Authentication flows. When this service is integrated, invoking the closeSession method from the Mobile/Web SDK is not required.",
      schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    variable: [
      {
        key: "baseUrl",
        value: "{{IDENTITY_API_BASE_URL}}",
        type: "string"
      },
      {
        key: "apiKey",
        value: "{{API_KEY}}",
        type: "string"
      },
      {
        key: "family",
        value: "{{FAMILY_TYPE}}",
        type: "string"
      },
      {
        key: "status",
        value: "{{TRACKING_STATUS}}",
        type: "string"
      },
      {
        key: "reason",
        value: "{{TRACKING_REASON}}",
        type: "string"
      },
      {
        key: "extraData",
        value: "{{EXTRA_DATA}}",
        type: "string"
      }
    ],
    item: [
      {
        name: "Finish Tracking - OnBoarding Success",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              family: "OnBoarding",
              status: "SUCCEEDED",
              reason: "MANUAL_STATUS_CHANGE",
              extraData: "{{extraData}}"
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/finishTracking",
            host: ["{{baseUrl}}"],
            path: ["services", "finishTracking"]
          },
          description: "Complete tracking process for successful OnBoarding flow. Sets status to SUCCEEDED with manual status change reason."
        }
      },
      {
        name: "Finish Tracking - Authentication Success",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              family: "Authentication",
              status: "SUCCEEDED",
              reason: "MANUAL_STATUS_CHANGE",
              extraData: "{{extraData}}"
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/finishTracking",
            host: ["{{baseUrl}}"],
            path: ["services", "finishTracking"]
          },
          description: "Complete tracking process for successful Authentication flow. Sets status to SUCCEEDED with manual status change reason."
        }
      },
      {
        name: "Finish Tracking - Custom",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              family: "{{family}}",
              status: "{{status}}",
              reason: "{{reason}}",
              extraData: "{{extraData}}"
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/services/finishTracking",
            host: ["{{baseUrl}}"],
            path: ["services", "finishTracking"]
          },
          description: "Complete tracking process with custom parameters. Use variables to configure family (OnBoarding/Authentication), status (SUCCEEDED/DENIED/ERROR/CANCELLED/BLACKLISTED), and reason codes."
        }
      }
    ]
  };
}

export function generateIdentityV2Collection(): PostmanCollection {
  return {
    info: {
      name: "IDAPI: Identity Validation V2",
      description: "This service performs both the liveness validation and the facial comparison between two faces, whether provided as open images or as tokenized parameters. It supports two types of facial validations, depending on the integrated widget.",
      schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    variable: [
      {
        key: "baseUrl",
        value: "{{IDENTITY_API_BASE_URL}}",
        type: "string"
      },
      {
        key: "apiKey",
        value: "{{API_KEY}}",
        type: "string"
      },
      {
        key: "token1",
        value: "{{TOKEN_1}}",
        type: "string"
      },
      {
        key: "bestImageToken",
        value: "{{BEST_IMAGE_TOKEN}}",
        type: "string"
      },
      {
        key: "extraData",
        value: "{{EXTRA_DATA}}",
        type: "string"
      },
      {
        key: "operationId",
        value: "{{OPERATION_ID}}",
        type: "string"
      },
      {
        key: "openImageBase64",
        value: "{{OPEN_IMAGE_BASE64}}",
        type: "string"
      },
      {
        key: "tokenFaceImage",
        value: "{{TOKEN_FACE_IMAGE}}",
        type: "string"
      }
    ],
    item: [
      {
        name: "Identity V2 - Method 3 (Open Image)",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{openImageBase64}}",
              bestImageToken: "{{bestImageToken}}",
              method: "3",
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/onboarding/v2/identity",
            host: ["{{baseUrl}}"],
            path: ["onboarding", "v2", "identity"]
          },
          description: "Identity validation using open image and tokenized bestImage. Requires an open-format image of the front of the ID card where the face is located."
        }
      },
      {
        name: "Identity V2 - Method 5 (Document Photo)",
        request: {
          method: "POST",
          header: [
            {
              key: "x-api-key",
              value: "{{apiKey}}",
              type: "text"
            },
            {
              key: "Content-Type",
              value: "application/json",
              type: "text"
            }
          ],
          body: {
            mode: "raw",
            raw: JSON.stringify({
              token1: "{{tokenFaceImage}}",
              bestImageToken: "{{bestImageToken}}",
              method: "5",
              tracking: {
                extraData: "{{extraData}}",
                operationId: "{{operationId}}"
              }
            }, null, 2)
          },
          url: {
            raw: "{{baseUrl}}/onboarding/v2/identity",
            host: ["{{baseUrl}}"],
            path: ["onboarding", "v2", "identity"]
          },
          description: "Identity validation using document photo token and tokenized bestImage. Requires SelphID Mobile widget implementation to generate the TokenFaceImage property."
        }
      }
    ]
  };
}

export function generateOnboardingPostmanCollection(serviceName: string): PostmanCollection | null {
  switch (serviceName) {
    case 'evaluatePassiveLivenessToken':
      return generateEvaluatePassiveLivenessTokenCollection();
    case 'authenticateFacial':
      return generateAuthenticateFacialCollection();
    case 'finishTracking':
      return generateFinishTrackingCollection();
    case 'identityV2':
      return generateIdentityV2Collection();
    default:
      return null;
  }
}

export function downloadPostmanCollection(collection: PostmanCollection, filename?: string): void {
  const blob = new Blob([JSON.stringify(collection, null, 2)], {
    type: 'application/json'
  });

  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename || `${collection.info.name.replace(/\s+/g, '_')}.postman_collection.json`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}