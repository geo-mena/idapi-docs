openapi: 3.1.1
info:
  title: Services API
  description: |
    The Services API provides identity verification and biometric services.
    
    ## Features
    
    * **Passive Liveness Detection**: Verify if a selfie image shows a live person
    * **Identity Verification**: Comprehensive identity validation services
    * **Real-time Processing**: Fast response times for critical applications
    
  version: 1.0.0
  contact:
    name: FacePhi Support
    email: support@facephi.com
servers:
  - url: '{IDENTITY_API_BASE_URL}'
    description: Identity API Base URL
    variables:
      IDENTITY_API_BASE_URL:
        default: 'https://api.identity-platform.io'
security:
  - apiKey: []
tags:
  - name: Services
    description: Identity verification and biometric services
paths:
  '/services/evaluatePassiveLivenessToken':
    post:
      tags:
        - Services
      summary: Evaluate Passive Liveness Token
      description: This service performs a liveness check using the best tokenized image obtained during the user's selfie capture. To generate the tokenized image, the native function of the Selphi widget is used, with the bestImage parameter (open image) generated by the widget.
      operationId: evaluatePassiveLivenessToken
      requestBody:
        description: Tokenized image data and tracking information for liveness evaluation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassiveLivenessTokenRequest'
            example:
              imageBuffer: "BAMBAQLNHJoWGPjfeuDIzDXdZuP/…"
              tracking:
                extraData: "BQABAQG2gBNjuHN..."
                operationId: "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"
      responses:
        '200':
          description: Successfully processed liveness evaluation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassiveLivenessResponse'
              examples:
                Live:
                  summary: Live detection result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "Live"
                    serviceTime: "799"
                    serviceTransactionId: "35d93da8-b843-4033-8e78-c0aabedcef8b"
                    serviceLivenessResult: 3
                NoLive:
                  summary: No live detection result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "NoLive"
                    serviceTime: "81"
                    serviceTransactionId: "3f332c81-3dfa-4952-b593-20e3b5651b5b"
                    serviceLivenessResult: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  title:
                    type: string
                    example: "Bad Request"
                  detail:
                    type: string
                    example: "Invalid request."
                  type:
                    type: string
                    example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
              example:
                status: 400
                title: "Bad Request"
                detail: "Invalid request."
                type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
              example:
                message: "Unauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: "User is not authorized to access this resource with an explicit deny"
              example:
                Message: "User is not authorized to access this resource with an explicit deny"
      security:
        - apiKey: []
  '/services/authenticateFacial':
    post:
      tags:
        - Services
      summary: Authenticate Facial
      description: This service performs facial validation between two faces, including both open images and biometric templates. Supports various authentication methods including open images, biometric templates, and document photo tokens.
      operationId: authenticateFacial
      requestBody:
        description: Facial authentication data with images/tokens and method specification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacialAuthenticationRequest'
            example:
              token1: "BASE64_IMAGE_OR_TOKEN"
              token2: "BASE64_IMAGE_OR_TOKEN"
              method: 1
              tracking:
                extraData: "BQABAQG2gBNjuHN..."
                operationId: "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"
      responses:
        '200':
          description: Successfully processed facial authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacialAuthenticationResponse'
              example:
                serviceResultCode: 0
                serviceResultLog: "Positive"
                serviceTime: "516"
                serviceTransactionId: "a29cbe15-2b68-495f-b7eb-be985b21c486"
                serviceFacialAuthenticationHash: "47D0ACDCF08C348469C2F512BB59216B46DCD9B253822ED0E4EEAFCEB76AADD5AEF20CA31EC52D03EB290EBC91A6AD65FB0416F9EB2164D3854932153074289E"
                serviceFacialAuthenticationResult: 3
                serviceFacialSimilarityResult: 0.99153554
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  title:
                    type: string
                    example: "Bad Request"
                  detail:
                    type: string
                    example: "Invalid request."
                  type:
                    type: string
                    example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
              example:
                status: 400
                title: "Bad Request"
                detail: "Invalid request."
                type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
              example:
                message: "Unauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: "User is not authorized to access this resource with an explicit deny"
              example:
                Message: "User is not authorized to access this resource with an explicit deny"
      security:
        - apiKey: []
  '/services/authenticateUser':
    post:
      tags:
        - Services
      summary: Authenticate User
      description: This service validates both liveness and facial authentication. It compares the biometric template (templateRaw), which was previously validated and stored in the client's data repository during the Onboarding process, with a bestImageToken generated at the time of authentication.
      operationId: authenticateUser
      requestBody:
        description: User authentication data with biometric templates and tokens
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateUserRequest'
            examples:
              WithRegisteredTemplate:
                summary: Authentication with registered biometric template
                value:
                  userId: "001"
                  registeredTemplateRaw: "BAIBAQFpWLJtBYBymCoRF…"
                  bestImageToken: "BAIBAQIJTHP8obR2r9ALdDtR5lT…"
                  merchantReferenceId: "authenticate-001"
                  tracking:
                    extraData: "BQABAQG2gBNjuHN..."
                    operationId: "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"
              WithImage:
                summary: Authentication with civil registry image
                value:
                  userId: "001"
                  image: "/9j/4AAQ..."
                  bestImageToken: "BAIBAQIJTHP8obR2r9ALdDtR5lT…"
                  merchantReferenceId: "authenticate-001"
                  tracking:
                    extraData: "BQABAQG2gBNjuHN..."
                    operationId: "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"
      responses:
        '200':
          description: User authentication processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateUserResponse'
              example:
                merchantReferenceId: "82b0084f-ddec-4415-8d2f-b085b42a0155"
                serviceResultCode: 0
                serviceResultLog: ""
                serviceFacialSimilarityResult: 0.9946970343589783
                timestamp: "2024-10-29T20:29:24Z"
                transactionId: "531ecbb1-de3d-4907-a737-0db236674e9a"
                registeredTemplateRaw: "BAIBAQGo+puJyHjfRD8n"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  title:
                    type: string
                    example: "Bad Request"
                  detail:
                    type: string
                    example: "Invalid request."
                  type:
                    type: string
                    example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
              example:
                status: 400
                title: "Bad Request"
                detail: "Invalid request."
                type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
              example:
                message: "Unauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: "User is not authorized to access this resource with an explicit deny"
              example:
                Message: "User is not authorized to access this resource with an explicit deny"
      security:
        - apiKey: []
    delete:
      tags:
        - Services
      summary: Delete Users
      description: Allows batch deletion of registered users from the authentication system.
      operationId: deleteUsers
      requestBody:
        description: List of user IDs to delete
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUsersRequest'
            example:
              userIds: ["001"]
      responses:
        '200':
          description: Users deletion processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUsersResponse'
              example:
                serviceResultCode: 0
                serviceResultLog: "Service request successfully processed"
                timestamp: "2024-10-29T20:29:24Z"
                transactionId: "531ecbb1-de3d-4907-a737-0db236674e9a"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  title:
                    type: string
                    example: "Bad Request"
                  detail:
                    type: string
                    example: "Invalid request."
                  type:
                    type: string
                    example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
              example:
                status: 400
                title: "Bad Request"
                detail: "Invalid request."
                type: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
              example:
                message: "Unauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: "User is not authorized to access this resource with an explicit deny"
              example:
                Message: "User is not authorized to access this resource with an explicit deny"
      security:
        - apiKey: []
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: API key for authentication
  schemas:
    PassiveLivenessTokenRequest:
      type: object
      required:
        - imageBuffer
      properties:
        imageBuffer:
          type: string
          format: byte
          description: BestImage property generated by the Selphi widget and tokenized using the widget's native function.
          example: "BAMBAQLNHJoWGPjfeuDIzDXdZuP/…"
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    TrackingInfo:
      type: object
      description: Object that represents necessary tracking information.
      properties:
        extraData:
          type: string
          format: byte
          description: Token generated by Mobile/Web SDK. Contains tokenized tracking information with Platform.
          example: "BQABAQG2gBNjuHN..."
        operationId:
          type: string
          description: Operation identifier generated by Mobile/Web SDK.
          example: "xxxxx-xxxxx-xxxxx-xxxxx-xxxxx"
    FacialAuthenticationRequest:
      type: object
      required:
        - token1
        - token2
        - method
      properties:
        token1:
          type: string
          format: byte
          description: Image used as reference for facial comparison. Depending on the method invoked, it can be the token generated by the SelphID widgets (document photo token), an open image, or a tokenized biometric template.
          example: "BASE64_IMAGE_OR_TOKEN"
        token2:
          type: string
          format: byte
          description: Image used for the comparison. It can be an open image or a tokenized biometric template.
          example: "BASE64_IMAGE_OR_TOKEN"
        method:
          type: integer
          description: |
            Indicates the comparison method invoked according to the following specification:
            - Method 1: Facial authentication using open images (token1: Base64, token2: Base64)
            - Method 2: Facial authentication using biometric templates (token1: templateRaw, token2: templateRaw)
            - Method 3: Facial authentication using an open image and a biometric template (token1: Base64, token2: templateRaw)
            - Method 4: Facial authentication using the token generated by the crop of the document photo and an open image (token1: tokenFaceImage, token2: Base64)
            - Method 5: Facial authentication using the token generated by the crop of the document photo and a biometric template (token1: tokenFaceImage, token2: templateRaw)
          enum: [1, 2, 3, 4, 5]
          example: 1
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    FacialAuthenticationResponse:
      type: object
      properties:
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See Table 1 - Service Result Code
          example: 0
        serviceTime:
          type: string
          description: Total processing time (milliseconds).
          example: "516"
        serviceFacialAuthenticationResult:
          type: integer
          description: Code indicating the result of the facial matching. See Table 2 - Service Facial Authentication Result
          example: 3
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Includes details when there is an error or exception in the module.
          example: "Positive"
        serviceFacialSimilarityResult:
          type: number
          format: float
          description: Value indicating the facial similarity between the face in the identity document photo and the selfie taken by the user. 1.0 = 100%
          example: 0.99153554
        serviceTransactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "a29cbe15-2b68-495f-b7eb-be985b21c486"
        serviceFacialAuthenticationHash:
          type: string
          description: Integrity hash of the biometric template used in a positive or uncertain facial authentication. Only applicable in methods 2, 3, and 5.
          example: "47D0ACDCF08C348469C2F512BB59216B46DCD9B253822ED0E4EEAFCEB76AADD5AEF20CA31EC52D03EB290EBC91A6AD65FB0416F9EB2164D3854932153074289E"
    AuthenticateUserRequest:
      type: object
      required:
        - userId
        - bestImageToken
        - merchantReferenceId
      properties:
        userId:
          type: string
          description: Unique identifier for the user. Must be persisted and associated with the corresponding biometric template. Needs to be at least two digits.
          example: "001"
        registeredTemplateRaw:
          type: string
          format: byte
          description: Template generated by the Selphi widget, AES256 encrypted and tokenized, sent in Base64 format. Represents the user's facial pattern with the most frontal face pose detected.
          example: "BAIBAQFpWLJtBYBymCoRF…"
        image:
          type: string
          format: byte
          description: Base64 formatted image obtained from the civil registry. Becomes mandatory if the registered biometric template (registeredTemplateRaw) is not provided.
          example: "/9j/4AAQ..."
        bestImageToken:
          type: string
          format: byte
          description: Tokenized bestImage property generated by the Selphi widget at the time of authentication.
          example: "BAIBAQIJTHP8obR2r9ALdDtR5lT…"
        template:
          type: string
          format: byte
          description: Base64 formatted biometric template. Becomes mandatory if tokenized bestImage (bestImageToken) is not provided.
          example: "templateBase64..."
        merchantReferenceId:
          type: string
          description: Client reference for each authentication. It is recommended that this data does not contain sensitive information such as PII (personally identifiable information).
          example: "authenticate-001"
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    AuthenticateUserResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp (UTC) of the response in the format YYYY-MM-DDThh:mm:ss.SSSZ
          example: "2024-10-29T20:29:24Z"
        transactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "531ecbb1-de3d-4907-a737-0db236674e9a"
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See Table 1 - Service Result Code
          example: 0
        serviceResultLog:
          type: string
          description: Descriptive field of the execution result when there is an error or exception. If successful, it indicates the result code description.
          example: ""
        serviceFacialSimilarityResult:
          type: number
          format: float
          description: Value indicating the facial similarity between the registeredTemplateRaw and the bestImageToken. 1.0 = 100%.
          example: 0.9946970343589783
        merchantReferenceId:
          type: string
          description: Reference sent in the body of the request.
          example: "82b0084f-ddec-4415-8d2f-b085b42a0155"
        registeredTemplateRaw:
          type: string
          format: byte
          description: Registered biometric template returned by the SelphID SDK extract for use in subsequent authentications.
          example: "BAIBAQGo+puJyHjfRD8n"
    DeleteUsersRequest:
      type: object
      required:
        - userIds
      properties:
        userIds:
          type: array
          items:
            type: string
          description: List of unique user identifiers to be deleted
          example: ["001"]
    DeleteUsersResponse:
      type: object
      properties:
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See Table 1 - Service Result Code
          example: 0
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Includes details when there is an error or exception.
          example: "Service request successfully processed"
        timestamp:
          type: string
          format: date-time
          description: Timestamp (UTC) of the response in the format YYYY-MM-DDThh:mm:ss.SSSZ
          example: "2024-10-29T20:29:24Z"
        transactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "531ecbb1-de3d-4907-a737-0db236674e9a"
    PassiveLivenessResponse:
      type: object
      properties:
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See Table 1 - Service Result Code
          example: 0
        serviceTime:
          type: string
          description: Total response time (milliseconds).
          example: "799"
        serviceLivenessResult:
          type: integer
          description: Code indicating the result of the passive liveness test evaluation. See Table 3 - Service Liveness Result
          example: 3
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Includes details when there is an error or exception.
          example: "Live"
        serviceTransactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "35d93da8-b843-4033-8e78-c0aabedcef8b"