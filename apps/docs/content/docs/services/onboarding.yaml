openapi: 3.1.1
info:
  title: Onboarding Services API
  description: |
    The Onboarding Services API provides biometric validation services for user registration and facial authentication verification.
    
    ## Features
    
    * **Facial Authentication**: Compare faces between images or templates
    * **Passive Liveness Detection**: Verify if a selfie image shows a live person
    * **Real-time Processing**: Fast response times for critical applications
    
  version: 1.0.0
  contact:
    name: FacePhi Support
    email: support@facephi.com
servers:
  - url: '{IDENTITY_API_BASE_URL}'
    description: Identity API Base URL
    variables:
      IDENTITY_API_BASE_URL:
        default: 'https://api.identity-platform.io'
security:
  - apiKey: []
tags:
  - name: Onboarding
    description: Biometric validation services for user registration
paths:
  '/services/evaluatePassiveLivenessToken':
    post:
      tags:
        - Onboarding
      summary: Evaluate Passive Liveness Token
      description: |
        This service performs a liveness check using the best tokenized image obtained during the user's selfie capture. To generate the tokenized image, the native function of the Selphi widget is used, with the bestImage parameter (open image) generated by the widget.

        **Integration**

        Requires the implementation of **Selphi Mobile widget** or **Selphi Web widget**.
      operationId: evaluatePassiveLivenessToken
      requestBody:
        description: Tokenized image data and tracking information for liveness evaluation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassiveLivenessTokenRequest'
            example:
              imageBuffer: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
              tracking:
                extraData: "BQABAQG2gBNjuHN4kLmPqYf7R..."
                operationId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Successfully processed liveness evaluation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PassiveLivenessResponse'
              examples:
                Live:
                  summary: Live Result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "Live"
                    serviceTime: "799"
                    serviceTransactionId: "35d93da8-b843-4033-8e78-c0aabedcef8b"
                    serviceLivenessResult: 3
                NoLive:
                  summary: No Live Result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "NoLive"
                    serviceTime: "81"
                    serviceTransactionId: "3f332c81-3dfa-4952-b593-20e3b5651b5b"
                    serviceLivenessResult: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayError'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayTimeoutError'
      security:
        - apiKey: []
  '/services/authenticateFacial':
    post:
      tags:
        - Onboarding
      summary: Authenticate Facial
      description: |
        Service that performs facial validation between two faces, including both open images and biometric templates.

        This service can be used to perform the following validations:
        
        1. Facial authentication between two **open images**, generated or not by FacePhi widgets.
        2. Facial authentication between two **biometric templates**, requires integration of FacePhi Selphi Mobile or Web widget.
        3. Facial authentication between an **open image** and a **biometric template**, requires integration of FacePhi Selphi Mobile or Web widget.
        4. Facial authentication between the face present in **identity document photo (TokenFaceImage)** and an **open image**, requires integration of FacePhi SelphID Mobile widget.
        5. Facial authentication between the face present in **identity document photo (TokenFaceImage)** and a **biometric template**, requires integration of FacePhi Selphi Mobile and SelphID Mobile widgets.

        **Integration**

        - For **validations type 4 and 5**, SelphID Mobile widget implementation is required to generate the TokenFaceImage property.
        - For **validations type 2, 3, and 5**, Selphi Mobile or Web widget implementation is required to generate the biometric template property (TemplateRaw).
      operationId: authenticateFacial
      requestBody:
        description: Facial authentication data with images/tokens and method specification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacialAuthenticationRequest'
            example:
              token1: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
              token2: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
              method: 1
              tracking:
                extraData: "BQABAQG2gBNjuHN4kLmPqYf7R..."
                operationId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Successfully processed facial authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacialAuthenticationResponse'
              examples:
                Positive:
                  summary: Positive Result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "Positive"
                    serviceTime: "516"
                    serviceTransactionId: "a29cbe15-2b68-495f-b7eb-be985b21c486"
                    serviceFacialAuthenticationHash: "47D0ACDCF08C348469C2F512BB59216B46DCD9B253822ED0E4EEAFCEB76AADD5AEF20CA31EC52D03EB290EBC91A6AD65FB0416F9EB2164D3854932153074289E"
                    serviceFacialAuthenticationResult: 3
                    serviceFacialSimilarityResult: 0.99153554
                Negative:
                  summary: Negative Result
                  value:
                    serviceResultCode: 0
                    serviceResultLog: "Negative"
                    serviceTime: "502"
                    serviceTransactionId: "e96e85a4-3f94-4000-b639-15c4f18c345b"
                    serviceFacialAuthenticationHash: "09B9A4097E3642ADEDB665BA2E15B096FFB65A039E0D7137D0AD38666F90A010624C26867E6A7DB8346385610CC9FEDE435C3CC6A2AC9B008DD98C6EFE8C42E7"
                    serviceFacialAuthenticationResult: 1
                    serviceFacialSimilarityResult: 0.01190000
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayError'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayTimeoutError'
      security:
        - apiKey: []
  '/onboarding/v2/identity':
    post:
      tags:
        - Onboarding
      summary: Identity Validation V2
      description: |
        This service performs both the liveness validation and the facial comparison between two faces, whether provided as open images or as tokenized parameters. It supports two types of facial validations, depending on the integrated widget:

        **Integration**

        - For **validation type 3**, an open-format image of the front of the ID card, where the face is located, is required.
        - For **validation type 5**, it is necessary to implement the SelphID Mobile widget to generate the TokenFaceImage property.
      operationId: identityValidationV2
      requestBody:
        description: Identity validation data with tokens and method specification
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityV2Request'
            example:
              token1: "/9j/4AAQSkZJRgABAQAASAB..."
              bestImageToken: "BAMBAQLNHJoWGPj..."
              method: "3"
              tracking:
                extraData: "BQABAQG2gBNjuHN4kLmPqYf7R..."
                operationId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Successfully processed identity validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityV2Response'
              example:
                serviceTransactionId: "2db602ee-3564-4304-af95-92a52eaae12d"
                serviceResultCode: 0
                serviceResultLog: "[identity] Service executed ok"
                serviceTime: "2235"
                facialAuthenticationResult: 3
                facialAuthenticationLog: "Positive"
                facialAuthenticationSimilarity: 0.99214232
                passiveLivenessResult: 3
                passiveLivenessLog: "Live"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayError'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayTimeoutError'
      security:
        - apiKey: []
components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: API access authorization
  schemas:
    BadRequestError:
      type: object
      required:
        - status
        - title
        - detail
        - type
        - errors
      properties:
        status:
          type: integer
          example: 400
        title:
          type: string
          example: "Bad Request"
        detail:
          type: string
          example: "Invalid request."
        type:
          type: string
          example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400"
        errors:
          type: array
          example: []
    UnauthorizedError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Unauthorized"
    ForbiddenError:
      type: object
      required:
        - Message
      properties:
        Message:
          type: string
          example: "User is not authorized to access this resource with an explicit deny"
    BadGatewayError:
      type: object
      required:
        - status
        - title
        - detail
        - type
      properties:
        status:
          type: integer
          example: 502
        title:
          type: string
          example: "Bad Gateway"
        detail:
          type: string
          example: "Server got an invalid response."
        type:
          type: string
          example: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502"
    GatewayTimeoutError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Endpoint request timed out"
    PassiveLivenessTokenRequest:
      type: object
      required:
        - imageBuffer
      properties:
        imageBuffer:
          type: string
          format: byte
          description: BestImage property generated by the Selphi widget and tokenized using the widget's native function.
          example: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    TrackingInfo:
      type: object
      description: Object that represents necessary tracking information.
      properties:
        extraData:
          type: string
          format: byte
          description: Token generated by Mobile/Web SDK. Contains tokenized tracking information with Platform.
          example: "BQABAQG2gBNjuHN4kLmPqYf7R..."
        operationId:
          type: string
          description: Operation identifier generated by Mobile/Web SDK.
          example: "123e4567-e89b-12d3-a456-426614174000"
    FacialAuthenticationRequest:
      type: object
      required:
        - token1
        - token2
        - method
      properties:
        token1:
          type: string
          format: byte
          description: Image used as reference for facial comparison. Depending on the method invoked, it can be the token generated by the SelphID widgets (document photo token), an open image, or a tokenized biometric template.
          example: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
        token2:
          type: string
          format: byte
          description: Image used for the comparison. It can be an open image or a tokenized biometric template.
          example: "BAMBAQLNHJoWGPjfeuDIzDXdZuP..."
        method:
          type: integer
          description: |
            Indicates the comparison method invoked according to the following specification:

            | Method | Description | Input |
            | :--- | :--- | :--- |
            | 1 | Facial authentication using open images | token1: Base64, token2: Base64 |
            | 2 | Facial authentication using biometric templates | token1: templateRaw, token2: templateRaw |
            | 3 | Facial authentication using an open image and a biometric template | token1: Base64, token2: templateRaw |
            | 4 | Facial authentication using the token generated by the crop of the document photo and an open image | token1: tokenFaceImage, token2: Base64 |
            | 5 | Facial authentication using the token generated by the crop of the document photo and a biometric template | token1: tokenFaceImage, token2: templateRaw |
          enum: [1, 2, 3, 4, 5]
          example: 1
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    FacialAuthenticationResponse:
      type: object
      required:
        - serviceResultCode
        - serviceTime
        - serviceFacialAuthenticationResult
        - serviceResultLog
        - serviceFacialSimilarityResult
        - serviceTransactionId
      properties:
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See [Service Result Code](/docs/services/serviceResultCodes#service-result-code)
          example: 0
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Includes details when there is an error or exception in the module.
          example: "Positive"
        serviceTime:
          type: string
          description: Total processing time (milliseconds).
          example: "516"
        serviceTransactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "a29cbe15-2b68-495f-b7eb-be985b21c486"
        serviceFacialAuthenticationHash:
          type: string
          description: Integrity hash of the biometric template used in a positive or uncertain facial authentication. Only applicable in methods 2, 3, and 5.
          example: "47D0ACDCF08C348469C2F512BB59216B46DCD9B253822ED0E4EEAFCEB76AADD5AEF20CA31EC52D03EB290EBC91A6AD65FB0416F9EB2164D3854932153074289E"
        serviceFacialAuthenticationResult:
          type: integer
          description: Code indicating the result of the facial matching. See [Service Facial Authentication Result](/docs/services/serviceResultCodes#service-facial-authentication-result)
          example: 3
        serviceFacialSimilarityResult:
          type: number
          format: float
          description: Value indicating the facial similarity between the face in the identity document photo and the selfie taken by the user. 1.0 = 100%
          example: 0.99153554
    PassiveLivenessResponse:
      type: object
      required:
        - serviceResultCode
        - serviceTime
        - serviceLivenessResult
        - serviceResultLog
        - serviceTransactionId
      properties:
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See [Service Result Code](/docs/services/serviceResultCodes#service-result-code)
          example: 0
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Includes details when there is an error or exception.
          example: "Live"
        serviceTime:
          type: string
          description: Total response time (milliseconds).
          example: "799"
        serviceTransactionId:
          type: string
          description: Transaction identifier associated with the request processed by the API.
          example: "35d93da8-b843-4033-8e78-c0aabedcef8b"
        serviceLivenessResult:
          type: integer
          description: Code indicating the result of the passive liveness test evaluation. See [Service Liveness Result](/docs/services/serviceResultCodes#service-liveness-result)
          example: 3
    IdentityV2Request:
      type: object
      required:
        - token1
        - bestImageToken
        - method
      properties:
        token1:
          type: string
          format: byte
          description: Image used as a reference for facial comparison. It can be a base64 image or TokenFaceImage, depending on the method.
          example: "/9j/4AAQSkZJRgABAQAASAB..."
        bestImageToken:
          type: string
          format: byte
          description: Tokenized bestImage property generated by the Selphi widget and tokenized using native function.
          example: "BAMBAQLNHJoWGPj..."
        method:
          type: string
          description: |
            Indicates the invoked comparison method according to the following specification:
            
            | Method | Description |
            |--------|-------------|
            | "3" | Facial authentication using an open image and tokenized bestImage (Base64 & bestImageToken) |
            | "5" | Facial authentication using the token generated by the document photo crop and tokenized bestImage (tokenFaceImage & bestImageToken) |
          enum: ["3", "5"]
          example: "3"
        tracking:
          $ref: '#/components/schemas/TrackingInfo'
    IdentityV2Response:
      type: object
      required:
        - serviceTransactionId
        - serviceResultCode
        - serviceResultLog
        - serviceTime
        - facialAuthenticationResult
        - facialAuthenticationLog
        - facialAuthenticationSimilarity
        - passiveLivenessResult
        - passiveLivenessLog
      properties:
        serviceTransactionId:
          type: string
          description: Transaction identifier associated with the API request.
          example: "2db602ee-3564-4304-af95-92a52eaae12d"
        serviceResultCode:
          type: integer
          description: Code indicating the overall result of the service execution. See [Service Result Code](/docs/services/serviceResultCodes#service-result-code)
          example: 0
        serviceResultLog:
          type: string
          description: Descriptive field of the service execution result. Provides details of errors or exceptions when they occur.
          example: "[identity] Service executed ok"
        serviceTime:
          type: string
          description: Field indicating the processing time (milliseconds).
          example: "2235"
        facialAuthenticationResult:
          type: integer
          description: Code indicating the result of the facial matching. See [Service Facial Authentication Result](/docs/services/serviceResultCodes#service-facial-authentication-result)
          example: 3
        facialAuthenticationLog:
          type: string
          description: Descriptive field of the facial matching result.
          example: "Positive"
        facialAuthenticationSimilarity:
          type: number
          format: float
          description: Value indicating the facial similarity between the document photo and the user-taken selfie. 1.0 = 100%
          example: 0.99214232
        passiveLivenessResult:
          type: integer
          description: Code indicating the result of the passive liveness test. See [Service Liveness Result](/docs/services/serviceResultCodes#service-liveness-result)
          example: 3
        passiveLivenessLog:
          type: string
          description: Descriptive field of the passive liveness result.
          example: "Live"